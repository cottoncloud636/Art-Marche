import User from "../models/users.model.js";
import { errorHandler } from "../utilities/customizederrors.js";
import bcryptjs from 'bcryptjs';
import Listing from "../models/listing.model.js";


export const routeContent = (req, res)=>{
    res.json(
        {
            testMsg: 'testing for separate func content with routing path',
        }
    );
}


export const updateForm=async (req, res, next)=>{
    //req.user.id: id came from the token (which is obtained from a session)
    //req.params.id: id came from the route -- update/:id, hence using parameter.id, cuz it is a parameter
    //this id is generated from clicking this "update" button (or submitting a form) that trigger a request with the URL automatically generated by the application 
    if (req.user.id !== req.params.id) return next(errorHandler(403, 'Server refuse to access, your identity does not match our record'));
    //if id matches, update the form
    try{
        //first, hash the password from the reqest body
        if (req.body.password){
            req.body.password = bcryptjs.hashSync(req.body.password, 10)
        }
        //secondly, update other user info
        const updateUser = await User.findByIdAndUpdate(req.params.id, {//User came from model name
            $set:{ //a mongoDB method
                userName: req.body.userName,
                email: req.body.email,
                password: req.body.password,
                picture: req.body.picture,
        }           
        }, {new: true}) //new: ensures I will get the new info, not the previous info
        const {password, ...rest} = updateUser._doc;
        res.status(200).json(rest);

    } catch(error){
        next(error);
    }
};

export const deleteUser = async (req, res, next)=>{
    if (req.user.id != req.params.id) //req.user.id came from checkUser.js -- token from jwt
        //use middleware--the customized error handler to pass status code and msg
        return next(errorHandler(401, 'You are not authorized to delete this user account'));
    
    try {//else means id matches, find this id in User model (mongoDB) and delete this user acct
        await User.findByIdAndDelete(req.params.id);
        res.clearCookie('access_token');
        res.status(200).json('User account was successfully deleted.');

    } catch (error) {
        next(error);
    }
};

export const getUserArtListing = async (req, res, next)=>{ //used async because getting response takes time
                                                           //"next" is used to handle error 
    if (req.user.id === req.params.id){ //"user" came from userSlice.js. "id" in req.user.id came from the 
                                        //token, refer to auth.controllders.js -- line 50                   
        try {
            const userArtListing = await Listing.find({//"Listing" is the name of model from listing.model.js
                userRef: req.params.id  //"userRef" is a property in listing,model.js, which refers to a user account
                                        //that is currently logged in
            });
                res.status(200).json(userArtListing);
            } catch (error) { //the if statement wrap the try and catch block, meaning under the circumstance that
                             //user account is already verified, here is the other errors that I catch
                next(error);
              }
    } else{ //while this error is when user account verification failed
        return next(errorHandler(401 ,'You are not authorized to view this listing.')) //errorHandler from customizederror.js
    }
};