import User from "../models/users.model.js";
import { errorHandler } from "../utilities/customizederrors.js";
import bcryptjs from 'bcryptjs';

export const routeContent = (req, res)=>{
    res.json(
        {
            testMsg: 'testing for separate func content with routing path',
        }
    );
}


export const updateForm=async (req, res, next)=>{
    //req.user.id: id came from the token (which is obtained from a session)
    //req.params.id: id came from the route -- update/:id, hence using parameter.id, cuz it is a parameter
    //this id is generated from clicking this "update" button (or submitting a form) that trigger a request with the URL automatically generated by the application 
    if (req.user.id !== req.params.id) return next(errorHandler(403, 'Server refuse to access, your identity does not match our record'));
    //if id matches, update the form
    try{
        //first, hash the password from the reqest body
        if (req.body.password){
            req.body.password = bcryptjs.hashSync(req.body.password, 10)
        }
        //secondly, update other user info
        const updateUser = await User.findByIdAndUpdate(req.params.id, {//User came from model name
            $set:{ //a mongoDB method
                userName: req.body.userName,
                email: req.body.email,
                password: req.body.password,
                picture: req.body.picture,
        }           
        }, {new: true}) //new: ensures I will get the new info, not the previous info
        const {password, ...rest} = updateUser._doc;
        res.status(200).json(rest);

    } catch(error){
        next(error);
    }
};